function [t,x,B]=method2(Interaction,Perturbation,InitialCondition)
% -------------------------------------------------------------------------
%                   This code solves an N species microbial community model
%                   described by fractional differential equations:
%                   D^mu(Xi)=Xi(bi.Fi-ki.Xi)
%                   where Fi=\prod[Kik^n/(Kik^n+Xk^n)], k=1,...,N and k~=i
%                   D is the fractional Caputo derivative and mu is its order                          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Inputs                   
%        mu - Order of derivatives, e.g. mu=0.7*ones(1,N);  % 1-Memory
%                                        Or
%                                        mu(Blue)=0.659; %  1-Memory_B
%                                        mu(Red)=1;      %  1-Memory_R
%                                        mu(Green)=1;    %  1-Memory_G 
%        ------------------------------------------------------------------
%        n -  Hill coefficient, e.g. n=2;                              
%        ------------------------------------------------------------------
%        N -  Number of Species (N=3k for specifying to 3 groups), e.g. N=15;
%        ------------------------------------------------------------------    
%        Interaction - Matrix interaction Kij
%                      Possible usages, 'MyChoice', 'Random', and 'Predefined'
%                      MyChoice: No distinct groups, then you should set your choice, e.g. Kij=0.5*ones(N,N);
%                      Random: Kij=1-exp(-5z), where z=Uniform(0,1)
%                      Perdefined: Defining 3 distinct groups--B, R, G,  Requirment: N is a multiplie of 3
%        ------------------------------------------------------------------
%        Ki - Death rate, e.g. Ki=1*ones(N,1); 
%        ------------------------------------------------------------------
%        T - Final time, e.g. T=700;
%        ------------------------------------------------------------------
%        InitialCondition -  Determining initial conditions for particular cases, e.g. InitialCondition='Equilibrium';
%                            Possible usages, 'MyChoice', 'Uniform(0,0.1)', and 'Equilibrium'
%                            MyChoice: In this case you should determine X0, e.g. X0=1/15*ones(N,1);
%                            Uniform(0,0.1): Randomly generated from a
%                                            uniform distribution between 0 and 1.
%                            Equilibrium: Fixed points when Interaction='Random',
%                                         n=4, ki=1*ones(N,1), and Perturbation='Pulse'
%        ------------------------------------------------------------------
%        X0 - Initial conditions, e.g. X0=1/15*ones(N,1); 
%                       In case of InitialCondition='MyChoice', you can define
%                       e.g. X0(Blue)=0.25;X0(Red)=0.35;X0(Green)=0.38;
%        ------------------------------------------------------------------
%        Perturbation - This is changes of the species growth rates, e.g. Perturbation='OUP';
%                       Possible usages 'False&b*', 'False&b*', 'Pulse' and 'OUP'
%                       False: No Perterbation, then you should determine
%                              the growth rates, e.g. b=ones(N,1)
%                       False&b*: No perturbation, and the growth rates are 
%                                 the mean of growth rates generated by OUP
%                       Pulse: Multiplying 0.5 to the first seven components
%                              of growth rate b=N(1,0.0025) from 100 to 155.
%                       OUP: Stochastic pertubation used in the paper;  requirement: T=<700 
%        ------------------------------------------------------------------
%         b - Growth rates for case Perturbation='False', e.g. b=ones(N,1);
%        
%-----------------------------------
% Outputs
%        t - Simulated time interval
%        x - Species abundances 
%        B - Growth rates including perturbation
%-----------------------------------
% Moein Khalighi - September 2020
%
%
%  Please, report any problem or comment to :
%          moein dot khalighi at utu dot fi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
global T mu X0 b bb N n Ki

switch Interaction
    case 'Predefined'
        load('Kij.mat');
        %------------------------------------------------------------------
    case 'Random'
        load('KijRand.mat');
end

%--------------------------------------------------------------------------
    
switch Perturbation
    case 'False'
        Fun=@fun;
        %------------------------------------------------------------------
    case    'False&b*'
        load('bMean.mat');
        bb=b;
        Fun=@fun;
        %------------------------------------------------------------------
    case 'Pulse'
        load('bRand.mat');
        Fun=@fun2;
        % Check if the final time passes the pulse
        if T<330
           warning('MATLAB:FinalTimeNotProper',...
              'The final time T=%d should be more than 155 to pass the pulse',T);
        end
        %------------------------------------------------------------------
    case 'OUP'
        Fun=@fun3;
        load('b15OUP.mat');
        bb=@(t,N)b(t,N);
        % Check if the final time is suitable with produced OUP
        if T>700
            error('MATLAB:FinalTimeNotCompatible', ...
                'The final time T=%d should be less than 700', T);
        end        
end
B=b;

%--------------------------------------------------------------------------

switch InitialCondition
    case 'Uniform(0,0.1)'
        load('x0.mat');
        X0=x0;
        %------------------------------------------------------------------
    case 'Equilibrium'
        load('X0Equilibrium.mat');
        X0=x0;
        % Check the conditions for fixed points
         % Check the conditions fixed points
        if n==4 && all(Ki==ones(N,1)) && ...
            strcmp(Perturbation,'Pulse') && strcmp(Interaction,'Random')
        else
            warning('MATLAB:FixedPoints', ...
                ['Check the conditions for using InitialCondition=Equilibrium: '...
                '---> Interaction=Random, n=4, ki=1*ones(N,1), and Perturbation=Pulse']);
        end           
end

%----------------------------------------------------------------------

t0=0; % initial time
h=0.01; % step size for computing


% solver for fractional differential equation
[t, x] = FDE_PI12_PC(mu,Fun,t0,T,X0,h);
end
% =========================================================================
% =========================================================================
function dx=fun(~,x)

global b N Ki

dx=zeros(N,1);

for i=1:N
dx(i)=x(i)*(b(i).*fi_Xk(i, x)-Ki(i).*x(i));
end
end
% =========================================================================
% =========================================================================
function dx=fun2(t,x)
global b N Ki 

%%% Pulse pertubation
if t>100 && t<155
    B=b;
B(1:7)=.5*b(1:7);
else
    B=b;
end
%%%

dx=zeros(N,1);

for i=1:N
dx(i)=x(i)*(B(i).*fi_Xk(i, x)-Ki(i).*x(i));
end
end
% =========================================================================
% =========================================================================
function dx=fun3(t,x)
global N Ki b

dx=zeros(N,1);
%%% OUP pertubation
    if t==0        
    B=b(1,1:N);        
    else
    B=b(ceil(t),1:N);        
    end
%%%

for i=1:N
dx(i)=x(i)*(B(i).*fi_Xk(i, x)-Ki(i).*x(i));
end
end
% =========================================================================
% =========================================================================
function fi=fi_Xk(i, x)
global n N Kij
fi=1;
K=1:N;K(i)=[];
for j=1:N-1
    k=K(j);
fi=fi*(Kij(i,k).^n/(Kij(i,k).^n+x(k).^n));
end
end
