%% Main_NSpecies
% -------------------------------------------------------------------------
%                   This code solves an N species microbial community model
%                   described by fractional differential equations:
%                   D^mu(Xi)=Xi(bi.Fi-ki.Xi)
%                   where Fi=\prod[Kik^n/(Kik^n+Xk^n)], k=1,...,N and k~=i
%                   D is the fractional Caputo derivative and mu is its order                          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Inputs                   
%        mu - Order of derivatives, e.g. mu=0.7*ones(1,N);  % 1-Memory
%                                        Or
%                                        mu(Blue)=0.659; %  1-Memory_B
%                                        mu(Red)=1;      %  1-Memory_R
%                                        mu(Green)=1;    %  1-Memory_G 
%        ------------------------------------------------------------------
%        n -  Hill coefficient, e.g. n=2;                              
%        ------------------------------------------------------------------
%        N -  Number of Species (N=3k for specifying to 3 groups), e.g. N=15;
%        ------------------------------------------------------------------    
%        Interaction - Matrix interaction Kij
%                      Possible usages, 'MyChoice', 'Random', and 'Predefined'
%                      MyChoice: No distinct groups, then you should set your choice, e.g. Kij=0.5*ones(N,N);
%                      Random: Kij=1-exp(-5z), where z=Uniform(0,1)
%                      Perdefined: Defining 3 distinct groups--B, R, G,  Requirment: N is a multiplie of 3
%        ------------------------------------------------------------------
%        Ki - Death rate, e.g. Ki=1*ones(N,1); 
%        ------------------------------------------------------------------
%        T - Final time, e.g. T=700;
%        ------------------------------------------------------------------
%        InitialCondition -  Determining initial conditions for particular cases, e.g. InitialCondition='Equilibrium';
%                            Possible usages, 'MyChoice', 'Uniform(0,0.1)', and 'Equilibrium'
%                            MyChoice: In this case you should determine X0, e.g. X0=1/15*ones(N,1);
%                            Uniform(0,0.1): Randomly generated from a
%                                            uniform distribution between 0 and 1.
%                            Equilibrium: Fixed points when Interaction='Random',
%                                         n=4, ki=1*ones(N,1), and Perturbation='Pulse'
%        ------------------------------------------------------------------
%        X0 - Initial conditions, e.g. X0=1/15*ones(N,1); 
%                       In case of InitialCondition='MyChoice', you can define
%                       e.g. X0(Blue)=0.25;X0(Red)=0.35;X0(Green)=0.38;
%        ------------------------------------------------------------------
%        Perturbation - This is changes of the species growth rates, e.g. Perturbation='OUP';
%                       Possible usages 'False&b*', 'False&b*', 'Pulse' and 'OUP'
%                       False: No Perterbation, then you should determine
%                              the growth rates, e.g. b=ones(N,1)
%                       False&b*: No perturbation, and the growth rates are 
%                                 the mean of growth rates generated by OUP
%                       Pulse: Multiplying 0.5 to the first seven components
%                              of growth rate b=N(1,0.0025) from 100 to 155.
%                       OUP: Stochastic pertubation used in the paper;  requirement: T=<700 
%        ------------------------------------------------------------------
%         b - Growth rates for case Perturbation='False', e.g. b=ones(N,1);
%        
%-----------------------------------
% Outputs
%        t - Simulated time interval
%        x - Species abundances 
%        B - Growth rates including perturbation
%-----------------------------------
% Moein Khalighi - September 2020
%
%
%  Please, report any problem or comment to :
%          moein dot khalighi at utu dot fi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear 
clc
global n N Ki T mu X0 b Kij
%% Inputs 
% Coefficients and Conditions
                       
% number of species
N=15; 
% dividing to 3 groups
N3=N/3; 
Blue=1:N3;Red=N3+1:2*N3;Green=2*N3+1:3*N3;


%Interaction Matrix
Interaction='Random'; % Possible usages, 'MyChoice', 'Random', and 'Predefined'                       
Kij=0.5*ones(N,N); % If you set Interaction='MyChoice', you should determine matix Kij

% Order of derivatives,  0<mu(i)=<1    
% mu=0.7*ones(1,N);   % Memory=1-mu: e.g. Memory=0.3 if mu=0.7*ones(1,N);      
                    % Or incummensurate random memory: e.g. mu=rand(1,N);
                    % Or distict groups by memory: e.g. mu(Blue)=0.25; mu(Red)=.35; mu(Green)=.38;
mu(Blue)=0.659; % 1-Memory_B
mu(Red)=1;    %  1-Memory_R
mu(Green)=1;  % 1-Memory_G 

% Hill coefficient
n=4; 

% death rate
Ki=1*ones(N,1); 

%  final time
T=700;

Perturbation='Pulse';  % Possible usages, 'False', 'False&b*', 'Pulse' and 'OUP'                                                   

%Growth rates
b=ones(N,1); % if you set Perterbation='False', then you can set your own Growth rates here
                          
% Initial conditions
InitialCondition='Equilibrium'; % Possible usages, 'MyChoice', 'Uniform(0,0.1)', and 'Equilibrium'

X0=1/15*ones(N,1); % In case of InitialCondition='MyChoice', you can e.g. define
                   % X0(Blue)=0.25;X0(Red)=0.35;X0(Green)=0.38;

[t,x,B]=method2(Interaction,Perturbation,InitialCondition);




%% plotting

RelX=x./(ones(N,1)*sum(x)); % Relative abundances

f=figure;Plot='non';
f.Renderer='painters';

% Defining colors (blind friendly) for plot
Pcolor=zeros(N,3);
p1=hex2rgb('#332288');
Pcolor(1,:)= p1;
p2=hex2rgb('#117733');
Pcolor(2,:)= p2;
p3=hex2rgb('#44AA99');
Pcolor(3,:)= p3;
p4=hex2rgb('#A2C19D');
Pcolor(4,:)= p4;
p5=hex2rgb('#DDCC77');
Pcolor(5,:)= p5;
p6=hex2rgb('#AF7AF2');
Pcolor(6,:)= p6;
p7=hex2rgb('#882255');
Pcolor(7,:)= p7;
p8=hex2rgb('#88CCEE');
Pcolor(8,:)= p8;
p9=hex2rgb('#F00248');
Pcolor(9,:)= p9;
p10=hex2rgb('#A9B222');
Pcolor(10,:)=p10;
p11=hex2rgb('#893ED2');
Pcolor(11,:)= p11;
p12=hex2rgb('#420F63');
Pcolor(12,:)= p12;
p13=hex2rgb('#C0E436');
Pcolor(13,:)= p13;
p14=hex2rgb('#DF4298');
Pcolor(14,:)=  p14;
p15=hex2rgb('#304B1C');
Pcolor(15,:)= p15;   

switch Interaction    
    case 'Predefined'
        switch InitialCondition
            case 'Uniform(0,0.1)'
%        ------------------------------------------------------------------                                
                %%%%plotting abundance of species
                
                pb=semilogx(t,x(Blue,:),'b'); % blue species
                set(pb,'LineWidth',3)
                hold on
                pr=semilogx(t,x(Red,:),'r'); % Red species
                set(pr,'LineWidth',3)
                pg=semilogx(t,x(Green,:),'g'); % Green species
                set(pg,'LineWidth',3)
                hold off
                axis([0 T 0 1]) % adjusting the axis
                % settings
                xlabel('\bf{time}')
                ylabel('Species abundance')
                set(gca,'FontSize',23, 'FontWeight', 'bold')
                
                % Remove highlighted bars from the legend
                for i=1:5
                    if ismember(i,2:5)==1
                set(get(get(pb(i),'Annotation'),'LegendInformation'),'IconDisplayStyle','off');
                set(get(get(pr(i),'Annotation'),'LegendInformation'),'IconDisplayStyle','off');
                set(get(get(pg(i),'Annotation'),'LegendInformation'),'IconDisplayStyle','off');
                    end
                end
                legend({'X_B', 'X_R', 'X_G'})
                % Text memory on the plot
                text(.07,.5,['Memory_{B}=',num2str(1-mu(N3))],'FontSize',24)
                text(.07,.4,['Memory_{R}=',num2str(1-mu(2*N3))],'FontSize',24)
                text(.07,.3,['Memory_{G}=',num2str(1-mu(3*N3))],'FontSize',24)

                axes('Position',[.35,.65,.4,.2])% adjusting axis
                
                % bar plots for showing the initial conditions
                box on 
                 hold on 
                 pp1=zeros(N,N);
                      for i = 1:N
                            pp1(i)=bar(i,x(i,1));    
                            if ismember(i,Blue)==1
                                set(pp1(i),'FaceColor','b');
                            elseif ismember(i,Red)==1
                                set(pp1(i),'FaceColor','r');
                            elseif ismember(i,Green)==1
                                set(pp1(i),'FaceColor','g');                
                            end
                      end
                      axis([0 N+1 0 round(2*max(x(:,1)),2)])% adjusting axis
                      hold off      
                      ylabel('\bf{Initial states}','FontSize',14)
                      set(gca,'FontSize',13, 'FontWeight', 'bold')
%        ------------------------------------------------------------------
            otherwise
                Plot='General';
        end
        
%        ------------------------------------------------------------------

    case 'Random' % switch Interaction
        switch InitialCondition
            case 'Equilibrium'
                switch Perturbation
                    case 'Pulse'                     
                        
                    %%%%plot of growth rate with pulse        
                    tt=0:.1:T;Nt=length(tt); % time simulating with 0.1 step size                    
                    BB=zeros(N,Nt); 
                    % Simulate growth rates with pulse
                    for i=1:Nt
                    if tt(i)>100 && tt(i)<155    
                    BB(1:7,i)=.5*b(1:7);
                    BB(8:N,i)=b(8:N);
                    else
                        BB(:,i)=b;
                    end
                    end
                    % plot (log) of growth rates
                    hold on
                    pb=gobjects(N,1);
                    for i=1:N
                    pb(i)=semilogy(tt,BB(i,:)); 
                    pb(i).Color=Pcolor(i,:);
                    end
                    %Settings for plot
                    set(gca,'YScale','log')
                    set(pb,'LineWidth',2)
                    ylabel('Growth rate')
                    xlabel('Time')
                    set(gca,'FontSize',18, 'FontWeight', 'bold')
                    
                    %%%%plotting relative abundance of species
                    figure
                    subplot(2,2,[1,3])
                    hold on
                    
                    % Highlight background as perturbation
                    RX=max(max(RelX))+0.04; % value for background highlight
                    f = [1 2 3 4];
                    v = [100 0; 155 0; 155 RX; 100 RX];
                    h1=patch('Faces',f,'Vertices',v,'FaceColor','b', 'EdgeColor','non', 'FaceAlpha',.16);
                    set(get(get(h1,'Annotation'),'LegendInformation'),'IconDisplayStyle','off');                  
                    
                    % Plot the relative abundances
                    p=gobjects(N,1);
                    for i=1:N
                    p(i)=plot(t,RelX(i,:)); % relative abundance
                    p(i).Color=Pcolor(i,:);
                    end
                    
                    % Settings for plot
                    set(p,'LineWidth',3)
                    ylabel('\bf{Relative abundance}')
                    xlabel('\bf{Time}')
                    set(gca,'FontSize',18, 'FontWeight', 'bold')
                   
                    % Generate legend or title for showing memory
                    if all(mu==mu(1))
                        title(['Memory=',num2str(1-mu(1))])
                    else
                        k =1; ind = 1; 
                    while k < length(mu)+1,
                       set(p(ind),'DisplayName',['X_{',num2str(k),...
                           '}, \mu_{',num2str(k),'}=',num2str(mu(k))])
                       k = k+1; ind = ind+1;
                    end
                    hleg1=legend('show');
                    set(hleg1,'Location','northeast','FontSize',11)
                    end
                    %%%%%%%%%%%%%Text the perturbation on plot
                    text(110,RX-.03,'\bf{0.5 x b_{J}}','FontSize',13)

                    text(178,RX-.01,'\bf{J}=','Color','k','FontSize',14)
                    text(200,RX-.01,'\bf{1}','Color',Pcolor(1,:),'FontSize',14)
                    text(200,RX-.016-.002,'\bf{2}','Color',Pcolor(2,:),'FontSize',14)
                    text(200,RX-.022-.004,'\bf{3}','Color',Pcolor(3,:),'FontSize',14)
                    text(200,RX-.028-.006,'\bf{4}','Color',Pcolor(4,:),'FontSize',14)
                    text(200,RX-.034-.008,'\bf{5}','Color',Pcolor(5,:),'FontSize',14)
                    text(200,RX-.04-.010,'\bf{6}','Color',Pcolor(6,:),'FontSize',14)
                    text(200,RX-.046-.012,'\bf{7}','Color',Pcolor(7,:),'FontSize',14)

                    hold off

                    axis tight
                    xlim([0,T])
                    
                    %%%%%%%%%%%%%%% Plot of 2 steady states of species with bar
                    
                    % first steady state
                    subplot(2,2,2)
                    line([0 N+1],[0.1,0.1])
                    hold on
                    
                    Y1=RelX(:,1);
                    pbar1=gobjects(1,N);
                          for i = 1:N
                                pbar1(i)=bar(i,Y1(i));    
                                pbar1(i).FaceColor=Pcolor(i,:);            
                          end
                    % Setting of ploting      
                    ylabel('\bf{1st steady state}')
                    xlabel('\bf{Species}')
                    text(1,0.01*(N+1),'t=0','FontSize',14)
                    axis([0,N+1,0,.2])
                    set(gca,'XTick',1:15)
                    hold off
                    
                    % % second steady state  
                    subplot(2,2,4)                    
                    line([0 N+1],[0.1,0.1])
                    hold on
                                                         
                    Y2=RelX(:,end);
                          for i = 1:N
                                pbar1(i)=bar(i,Y2(i));    
                                pbar1(i).FaceColor=Pcolor(i,:);            
                          end
                    % Setting of ploting
                    ylabel('\bf{2nd steady state}')
                    xlabel('\bf{Species}')
                    text(1,0.01*(N+1),['t=',num2str(t(end))],'FontSize',14)
                    axis([0,N+1,0,.2])
                    set(gca,'XTick',1:15)
                    hold off
%        ------------------------------------------------------------------
                    otherwise
                    Plot='General';
                end
%        ------------------------------------------------------------------
                otherwise
                Plot='General';
        end
%        ------------------------------------------------------------------        
    case 'MyChoice'   % swtich Interaction   
        
          switch Perturbation
              case 'Pulse'
                  
              %%%%plot of growth rate with pulse        
                    tt=0:.1:T;Nt=length(tt); % time simulating with 0.1 step size 
                    BB=zeros(N,Nt);
                    % Simulate growth rates with pulse
                    for i=1:Nt
                    if tt(i)>100 && tt(i)<155    
                    BB(1:7,i)=.5*b(1:7);
                    BB(8:N,i)=b(8:N);
                    else
                        BB(:,i)=b;
                    end
                    end
                    % plot (log) of growth rates
                    hold on
                    pb=gobjects(N,1);
                    for i=1:N
                    pb(i)=semilogy(tt,BB(i,:)); 
                    pb(i).Color=Pcolor(i,:);
                    end
                    % Settings for plot
                    set(gca,'YScale','log')
                    set(pb,'LineWidth',2)
                    ylabel('Growth rate')
                    xlabel('Time')
                    set(gca,'FontSize',18, 'FontWeight', 'bold')
                    
                    %%%%plotting relative abundance of species
                    
                    figure                   
                    hold on
                    % Highlight background as perturbation
                    RX=max(max(RelX))+0.04; % value for background highlight
                    f = [1 2 3 4];
                    v = [100 0; 155 0; 155 RX; 100 RX];
                    h1=patch('Faces',f,'Vertices',v,'FaceColor','b',...
                        'EdgeColor','non', 'FaceAlpha',.16);
                    set(get(get(h1,'Annotation'),'LegendInformation'),...
                        'IconDisplayStyle','off');
                    
                    % Plot the relative abundances
                    p=gobjects(N,1);
                    for i=1:N
                    p(i)=plot(t,RelX(i,:)); % relative abundance
                    p(i).Color=Pcolor(i,:);
                    end
                    
                    % Settings for plot
                    set(p,'LineWidth',3)
                    ylabel('\bf{Relative abundance}')
                    xlabel('\bf{Time}')
                    set(gca,'FontSize',18, 'FontWeight', 'bold')
                    
                    % Generate legend or title for showing memory
                    if all(mu==mu(1))
                        title(['Memory=',num2str(1-mu(1))])
                    else
                        k =1; ind = 1; 
                    while k < length(mu)+1,
                       set(p(ind),'DisplayName',['X_{',num2str(k),...
                           '}, \mu_{',num2str(k),'}=',num2str(mu(k))])
                       k = k+1; ind = ind+1;
                    end
                    hleg1=legend('show');
                    set(hleg1,'Location','northeast','FontSize',11)
                    end
                    %%%%%%%%%%%%%Text the perturbation on plot
                    text(110,RX-.03,'\bf{0.5 x b_{J}}','FontSize',13)

                    text(178,RX-.01,'\bf{J}=','Color','k','FontSize',14)
                    text(200,RX-.01,'\bf{1}','Color',Pcolor(1,:),'FontSize',14)
                    text(200,RX-.016-.002,'\bf{2}','Color',Pcolor(2,:),'FontSize',14)
                    text(200,RX-.022-.004,'\bf{3}','Color',Pcolor(3,:),'FontSize',14)
                    text(200,RX-.028-.006,'\bf{4}','Color',Pcolor(4,:),'FontSize',14)
                    text(200,RX-.034-.008,'\bf{5}','Color',Pcolor(5,:),'FontSize',14)
                    text(200,RX-.04-.010,'\bf{6}','Color',Pcolor(6,:),'FontSize',14)
                    text(200,RX-.046-.012,'\bf{7}','Color',Pcolor(7,:),'FontSize',14)

                    hold off
                    axis tight
                    xlim([0,T])               
                    
%        ------------------------------------------------------------------

              otherwise % switch Perturbation

              Plot='General';
                  
 
          end            
end
%        ------------------------------------------------------------------
switch Plot 
    case 'General'

    %%%%plotting abundance of species (log 10 for x axis)
    px=semilogx(t,x);
    set(px,'LineWidth',3)
    xlabel('Time (log10)')
    ylabel('Species abundance')
    set(gca,'FontSize',23, 'FontWeight', 'bold')

    % Generate legend or title for showing memory
    if all(mu==mu(1))
        title(['Memory=',num2str(1-mu(1))])
    else
        k =1; ind = 1; 
    while k < length(mu)+1,
       set(p(ind),'DisplayName',['X',num2str(k),...
           ', \mu',num2str(k),'=',num2str(mu(k))])
       k = k+1; ind = ind+1;
    end
    hleg1=legend('show');
    set(hleg1,'Location','northeast','FontSize',11)
    end

    %%%plotting abundance of species (log 10 for y axis)
    figure
    py=semilogy(t,x);
    % Settings for plot
    set(py,'LineWidth',3)                    
    xlabel('Time')
    ylabel('Species abundance (log10)')
    set(gca,'FontSize',23, 'FontWeight', 'bold')

    % Generate legend or title for  showing memory
    if all(mu==mu(1))
        title(['Memory=',num2str(1-mu(1))])
    else
        k =1; ind = 1; 
    while k < length(mu)+1,
       set(px(ind),'DisplayName',['X_{',num2str(k),...
           '}, \mu_{',num2str(k),'}=',num2str(mu(k))])
       k = k+1; ind = ind+1;
    end
    hleg1=legend('show');
    set(hleg1,'Location','northeast','FontSize',11)
    end

    %%%plotting abundance of species (log 10)
    figure
    py=loglog(t,x);
    set(py,'LineWidth',3)
    xlabel('Time (log)')
    ylabel('Species abundance (log10)')
    set(gca,'FontSize',23, 'FontWeight', 'bold')
    % Generate legend or title for showing memory
    if all(mu==mu(1))
        title(['Memory=',num2str(1-mu(1))])
    else
        k =1; ind = 1; 
    while k < length(mu)+1,
       set(py(ind),'DisplayName',['X_{',num2str(k),...
           '}, \mu_{',num2str(k),'}=',num2str(mu(k))])
       k = k+1; ind = ind+1;
    end
    hleg1=legend('show');
    set(hleg1,'Location','northeast','FontSize',11)
    end

    %%%plotting abundance of species
    figure
    ppp=plot(t,x);
    set(ppp,'LineWidth',3)
    xlabel('Time')
    ylabel('Species abundance')
    set(gca,'FontSize',23, 'FontWeight', 'bold')
    % Generate legend or title for showing memory
    if all(mu==mu(1))
        title(['Memory=',num2str(1-mu(1))])
    else
        k =1; ind = 1; 
    while k < length(mu)+1,
       set(ppp(ind),'DisplayName',['X_{',num2str(k),...
           '}, \mu_{',num2str(k),'}=',num2str(mu(k))])
       k = k+1; ind = ind+1;
    end
    hleg1=legend('show');
    set(hleg1,'Location','northeast','FontSize',11)
    end
%        ------------------------------------------------------------------
    switch Perturbation
        case 'OUP'
            %%%%plot of growth rate

            tt=1:T; % time simulating with 1 step size

            % Simulate growth rates with perturbation
            p=plot(tt,B(1:T,:));

            % Settings for plot
            set(p,'LineWidth',2)
            ylabel('Growth Rates')
            xlabel('Time')
            set(gca,'FontSize',23, 'FontWeight', 'bold')

                k =1; ind = 1; 
            while k < length(mu)+1,
               set(p(ind),'DisplayName',['b',num2str(k)])
               k = k+1; ind = ind+1;
            end
            hleg1=legend('show');
            set(hleg1,'Location','northeast','FontSize',11)
    end
%        ------------------------------------------------------------------
end